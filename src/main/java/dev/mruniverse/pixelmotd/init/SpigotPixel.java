package dev.mruniverse.pixelmotd.init;

import com.comphenix.protocol.ProtocolLibrary;
import com.comphenix.protocol.ProtocolManager;
import dev.mruniverse.pixelmotd.commands.SpigotCMD;
import dev.mruniverse.pixelmotd.enums.Files;
import dev.mruniverse.pixelmotd.enums.SaveMode;

import dev.mruniverse.pixelmotd.bstats.BukkitMetrics;

import dev.mruniverse.pixelmotd.enums.InitMode;
import dev.mruniverse.pixelmotd.listeners.SpigotEvents;
import dev.mruniverse.pixelmotd.listeners.SpigotMotd;
import dev.mruniverse.pixelmotd.files.FileManager;
import dev.mruniverse.pixelmotd.files.SpigotControl;

import dev.mruniverse.pixelmotd.utils.HexManager;

import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.event.Listener;
import org.bukkit.plugin.java.JavaPlugin;

public class SpigotPixel extends JavaPlugin implements Listener {
    private static SpigotPixel instance;
    private static HexManager hManager;
    private static FileManager fManager;

    private LoaderUtils loaderUtils;

    public static HexManager getHex() {
        return hManager;
    }

    @Override
    public void onLoad() {
        instance = this;
        long temporalTimer = System.currentTimeMillis();
        fManager = new FileManager(InitMode.SPIGOT_VERSION);
        fManager.loadFiles();
        fManager.loadConfiguration();
        SpigotControl.save(SaveMode.ALL);
        hManager = new HexManager();
        hManager.setHex(SpigotControl.getControl(Files.SETTINGS).getBoolean("settings.hexColors"));

        loaderUtils = new LoaderUtils(false);
        loaderUtils.pluginUpdater();

        sendConsole("All files loaded in &b" + (System.currentTimeMillis() - temporalTimer) + "&fms.");
    }
    @Override
    public void onDisable() {
        sendConsole("The plugin was unloaded.");
    }
    @Override
    public void onEnable() {
        long temporalTimer = System.currentTimeMillis();

        loaderUtils.loadMetrics();

        if(cantWork()) {
            reportDependencies();
        };

        loaderUtils.registerListeners();
        loaderUtils.registerCommands();

        ProtocolManager protocolManager = ProtocolLibrary.getProtocolManager();
        protocolManager.addPacketListener((new SpigotMotd()).getPacketAdapter());
        sendConsole("All events loaded in &b" + (System.currentTimeMillis() - temporalTimer) + "&fms.");
    }
    private boolean cantWork() {
        if (Bukkit.getServer().getPluginManager().getPlugin("PlaceholderAPI") != null) {
            usingPAPI();
        }
        return Bukkit.getServer().getPluginManager().getPlugin("ProtocolLib") == null;
    }
    private void usingPAPI() {
        if(!SpigotControl.getControl(Files.SETTINGS).getBoolean("hooks.PlaceholderAPI")) {
            sendConsole("If you want you can enable PlaceholderAPI hook, you have installed PlaceholderAPI.");
            return;
        }
        sendConsole("You have enabled PlaceholderAPI hook, Amazing :).");
    }
    public static FileManager getFiles() {
        return fManager;
    }
    private void reportDependencies() {
        getServer().getConsoleSender().sendMessage(color("&c[Pixel MOTD] &fPixelMOTD Need ProtocolLib to work."));
    }
    public static void redIssue() {
        instance.getServer().getConsoleSender().sendMessage(color("&b[Pixel MOTD] &fCan't connect to SpigotMC and bStats, please check host internet or disable plugin autoUpdater and bStats to hide this message."));
    }
    public static void motdIssue(String type,String name) {
        sendConsole("Can't generate a correct motd, Latest issue was generated by the next motd: (" + type + "-" + name + ")");
    }
    private static String color(String message) {
        return ChatColor.translateAlternateColorCodes('&',message);
    }
    public static SpigotPixel getInstance() {
        return instance;
    }
    public static void sendConsole(String message) {
        instance.getServer().getConsoleSender().sendMessage(color("&b[Pixel MOTD] &f" + message));
    }
}
